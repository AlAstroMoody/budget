/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–æ–≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä
 */
export class FileParser {
  constructor() {
    this.parsers = {};
  }

  /**
   * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
   */
  async loadParser(fileType) {
    if (this.parsers[fileType]) {
      return this.parsers[fileType];
    }

    try {
      if (fileType === "excel") {
        const { excelParser } = await import("./excelParser");
        this.parsers.excel = excelParser;
        return excelParser;
      } else if (fileType === "pdf") {
        const { pdfParser } = await import("./pdfParser");
        this.parsers.pdf = pdfParser;
        return pdfParser;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ ${fileType}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${fileType}`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
   */
  detectFileType(file) {
    const fileName = file.name.toLowerCase();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if (fileName.endsWith(".xlsx") || fileName.endsWith(".xls")) {
      return "excel";
    }

    if (fileName.endsWith(".pdf")) {
      return "pdf";
    }

    // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ MIME —Ç–∏–ø—É
    if (file.type) {
      if (file.type.includes("spreadsheet") || file.type.includes("excel")) {
        return "excel";
      }
      if (file.type === "application/pdf") {
        return "pdf";
      }
    }

    throw new Error(
      "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Excel (.xlsx, .xls) –∏ PDF (.pdf) —Ñ–∞–π–ª—ã"
    );
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—è –µ–≥–æ —Ç–∏–ø
   */
  async parseFile(file) {
    try {
      console.log("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞:", file.name);

      const fileType = this.detectFileType(file);

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Å–µ—Ä
      const parser = await this.loadParser(fileType);

      // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞
      if (fileType === "excel") {
        return await parser.parseExcelFile(file);
      } else if (fileType === "pdf") {
        return await parser.parsePdfFile(file);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞:", error);
      throw error;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  getSupportedFormats() {
    return [
      { name: "Excel —Ñ–∞–π–ª—ã", extensions: [".xlsx", ".xls"], type: "excel" },
      { name: "PDF —Ñ–∞–π–ª—ã", extensions: [".pdf"], type: "pdf" },
    ];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –¥–ª—è input accept
   */
  getAcceptString() {
    const formats = this.getSupportedFormats();
    return formats.map((format) => format.extensions.join(",")).join(",");
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
export const fileParser = new FileParser();
